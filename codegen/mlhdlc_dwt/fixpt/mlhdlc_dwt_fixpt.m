%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%           Generated by MATLAB 9.4 and Fixed-Point Designer 6.1           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
% MATLAB design: 8-point Discrete WT
% 
% Introduction:
% Performs and returns the DWT of the input TDM signals as a part of Transmultiplexer operation
% to be transmitted over a communications channel
function [y_out] = mlhdlc_dwt_fixpt(x_in)

fm = get_fimath();

hid = fi([-0.230377813308855 0.714846570552542 -0.630880767929591 -0.0279837694169839 0.187034811718881 0.0308413818359870 -0.0328830116669830 -0.0105974017849973], 1, 14, 13, fm);

% declare and initialize the delay registers
% persistent ud1 ud2 ud3 ud4 ud5 ud6 ud7 ud8;
% if isempty(ud1)
%     ud1 = 0; ud2 = 0; ud3 = 0; ud4 = 0; ud5 = 0; ud6 = 0; ud7 = 0; ud8 = 0;
% end

% access the previous value of states/registers
% a1 = ud1;
% a2 = ud2;
% a3 = ud3;
% a4 = ud4;
% a5 = ud5;
% a6 = ud6;
% a7 = ud7;
% a8 = ud8;

% x = [a1 a2 a3 a4 a5 a6 a7 a8];

% DWT of the output
y_out = fi(dwt(x_in,hid), 1, 14, 12, fm);

% delayout input signal
% x_out = idwt(y_out,hid);

% update the delay line
% ud8 = ud7; 
% ud7 = ud6;
% ud6 = ud5;
% ud5 = ud4;
% ud4 = ud3;
% ud3 = ud2;
% ud2 = ud1;
% ud1 = x_in;

end

function g = dwt(f,h)
%  function g = dwt(f,h,NJ); Calculates the DWT of periodic  f
%  with scaling filter  h

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This script/function was created by 
% Abdullah Al Muhit
% contact - almuhit@gmail.com
% website - https://sites.google.com/site/almuhit/
% Please use it at your own risk. Also, Please cite the following paper:
% A A Muhit, M S Islam, and M Othman, “VLSI Implementation of Discrete Wavelet Transform (DWT) for Image Compression”, in Proc. of The Second International Conference on Autonomous Robots and Agents, Palmerston North, New Zealand, pp. 391-395, 2004, ISBN 0-476-00994-4. [PDF]
% A A Muhit, M S Islam, and M Othman, “ Design Design and Analysis of Discrete Wavelet Transform (DWT) for Image Compression Using VHDL”, in Proc. of the International Conference on Parallel and Distributed Processing Techniques and Applications, PDPTA 2005, Volume 1. CSREA Press 2005, pp. 157-160, Las Vegas, Nevada, USA, 2005, ISBN 1-932415-58-0. [PDF]
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fm = get_fimath();

N = fi(length(h), 0, 4, 0, fm);  L = fi(length(f), 0, 4, 0, fm);
c = fi(f, 1, 14, 12, fm);
h0  = fi(fliplr(h), 1, 14, 13, fm);                          % Scaling filter
h1 = fi(h, 1, 14, 13, fm);  h1(fi(1, 0, 1, 0, fm):fi(2, 0, 2, 0, fm):N) = fi_uminus(h1(fi(1, 0, 1, 0, fm):fi(2, 0, 2, 0, fm):N));          % Wavelet filter

L(:) = length(c);
c = fi([fi(c(mod((fi_uminus((fi_signed(N)-fi(1, 0, 1, 0, fm))):fi(-1, 1, 2, 0, fm)),L)+fi(1, 0, 1, 0, fm)), 1, 14, 12, fm) c], 1, 14, 12, fm);          % Make periodic

%subplot(3,1,1);plot(f);
%subplot(3,1,2);plot(c);

d = fi(conv(c,h1), 1, 14, 12, fm);   d = fi(d(N:fi(2, 0, 2, 0, fm):(fi_signed(N+L)-fi(2, 0, 2, 0, fm))), 1, 14, 12, fm);     % Convolve & d-sample
c = fi(conv(c,h0), 1, 14, 12, fm);   c = fi(c(N:fi(2, 0, 2, 0, fm):(fi_signed(N+L)-fi(2, 0, 2, 0, fm))), 1, 14, 12, fm);     % Convolve & d-sample

g = fi([fi(c, 1, 14, 12, fm),d], 1, 14, 12, fm);                                % The DWT
end

function [y] = fliplr(x)
%FLIPLR Redefinition of MATLAB  fliplr function
%   Reverses the input array
fm = get_fimath();

N = fi(length(x), 0, 4, 0, fm);
y = fi(zeros(1,fi_toint(N)), 1, 14, 13, fm);
for i=fi(1, 0, 1, 0, fm):N
    y(N-i+fi(1, 0, 1, 0, fm)) = x(i);
end
end

function [y] = conv(x,h)
%CONV Redifinition of discrete convolution function to work with HDL Coder
%   Input: Array of elements to be convolved
%   Output: Discrete convolution of input elements
fm = get_fimath();

n = fi(length(h) + length(x) - 1, 0, 5, 0, fm);
y = fi(zeros(1,fi_toint(n)), 1, 14, 12, fm);

for i=fi(1, 0, 1, 0, fm):n
    sum = fi(0, 1, 14, 12, fm);
    for j=fi(1, 0, 1, 0, fm):i
        if (((i- j+ fi(1, 0, 1, 0, fm)) <= fi(length(h), 0, 4, 0, fm) ) &&(j <= fi(length(x), 0, 4, 0, fm) ))
            sum(:) = sum + x(j)* h(i- j+ fi(1, 0, 1, 0, fm));
        end
    end
    y(i) = sum;
end
end



function y = fi_signed(a)
    coder.inline( 'always' );
    if isfi( a ) && ~(issigned( a ))
        nt = numerictype( a );
        new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
        y = fi( a, new_nt, fimath( a ) );
    else
        y = a;
    end
end


function y = fi_toint(u)
    coder.inline( 'always' );
    if isfi( u )
        nt = numerictype( u );
        s = nt.SignednessBool;
        wl = nt.WordLength;
        y = int32( fi( u, s, wl, 0, hdlfimath ) );
    else
        y = int32( u );
    end
end


function y = fi_uminus(a)
    coder.inline( 'always' );
    if isfi( a )
        nt = numerictype( a );
        new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
        y = -fi( a, new_nt, fimath( a ) );
    else
        y = -a;
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'SumMode','FullPrecision');
end
